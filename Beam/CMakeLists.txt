cmake_minimum_required(VERSION 3.28)
project(Beam LANGUAGES CXX)
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
set(D "${CMAKE_BINARY_DIR}/Dependencies" CACHE STRING
  "Path to dependencies folder.")
file(TO_NATIVE_PATH "${D}" D)
set(DEFAULT_BUILD_TYPE "Release")
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  set(CMAKE_BUILD_TYPE "${DEFAULT_BUILD_TYPE}" CACHE
    STRING "Choose the type of build." FORCE)
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
    "Debug" "Release" "MinSizeRel" "RelWithDebInfo")
endif()
if(WIN32)
  set(configure_script
    cmd /c "CALL ${CMAKE_SOURCE_DIR}/configure.bat -DD=${D}")
elseif(UNIX)
  set(configure_script "${CMAKE_SOURCE_DIR}/configure.sh" "-DD=${D}"
    "${CMAKE_BUILD_TYPE}")
endif()
include(Config/dependencies.cmake)
include_directories(${BEAM_INCLUDE_PATH})
include_directories(SYSTEM ${ASPEN_INCLUDE_PATH})
include_directories(SYSTEM ${BOOST_INCLUDE_PATH})
include_directories(SYSTEM ${CRYPTOPP_INCLUDE_PATH})
include_directories(SYSTEM ${DOCTEST_INCLUDE_PATH})
include_directories(SYSTEM ${LUA_INCLUDE_PATH})
include_directories(SYSTEM ${MYSQL_INCLUDE_PATH})
include_directories(SYSTEM ${OPEN_SSL_INCLUDE_PATH})
include_directories(SYSTEM ${SQLITE_INCLUDE_PATH})
include_directories(SYSTEM ${TCLAP_INCLUDE_PATH})
include_directories(SYSTEM ${VIPER_INCLUDE_PATH})
include_directories(SYSTEM ${YAML_INCLUDE_PATH})
include_directories(SYSTEM ${ZLIB_INCLUDE_PATH})
link_directories(${BOOST_DEBUG_PATH})
link_directories(${BOOST_OPTIMIZED_PATH})
set(TEST_INSTALL_DIRECTORY "${PROJECT_BINARY_DIR}/Tests")
set(LIB_INSTALL_DIRECTORY "${PROJECT_BINARY_DIR}/Libraries")
if(MSVC)
  add_compile_options(/bigobj /external:anglebrackets /external:W0
    $<$<CONFIG:Release>:/GL> /MP /WX)
  add_compile_definitions(_CRT_SECURE_NO_DEPRECATE NOMINMAX
    _SCL_SECURE_NO_WARNINGS WIN32_LEAN_AND_MEAN _WIN32_WINNT=0x0501)
  add_link_options($<$<CONFIG:Release>:/LTCG> /SAFESEH:NO)
elseif(CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang")
  add_compile_options(-g $<$<CONFIG:Release>:-DNDEBUG -O2>)
  if(${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang")
    add_compile_options(-fsized-deallocation)
  endif()
endif()
if(CYGWIN)
  add_compile_definitions(__USE_W32_SOCKETS)
endif()
if(CMAKE_SYSTEM_NAME STREQUAL "SunOS")
  add_compile_options($<$<CONFIG:Release>:-pthreads>)
endif()
add_subdirectory(Config/Beam)
add_subdirectory(Config/Codecs)
add_subdirectory(Config/Collections)
add_subdirectory(Config/IO)
add_subdirectory(Config/Json)
add_subdirectory(Config/Network)
add_subdirectory(Config/Parsers)
add_subdirectory(Config/Python)
add_subdirectory(Config/Queries)
add_subdirectory(Config/Queues)
add_subdirectory(Config/Reactors)
add_subdirectory(Config/RegistryService)
add_subdirectory(Config/Serialization)
add_subdirectory(Config/ServiceLocator)
add_subdirectory(Config/Services)
add_subdirectory(Config/Stomp)
add_subdirectory(Config/Threading)
add_subdirectory(Config/TimeService)
add_subdirectory(Config/UidService)
add_subdirectory(Config/WebServices)
